{"version":3,"sources":["backdrop.js","app.js","index.js"],"names":["BackdropContext","createContext","content","setContent","BackdropProvider","children","useState","Provider","value","Backdrop","open","CustomBackdrop","useContext","useEffect","App","Container","GoogleSheet","useGoogleSheets","apiKey","process","sheetId","sheetNames","error","loading","data","Alert","severity","ParseData","rawData","setData","useAsyncEffect","mounted","a","parseData","sheet","find","id","timelines","names","forEach","name","generateTimeline","rows","timeline","row","rawText","textParts","split","steam64Id","totalPlayTime","sessions","Number","lastPlayed","kills","deaths","longestKill","averageEngagementDistance","topWeapon","push","Timelines","Grid","container","spacing","Object","keys","map","key","item","xs","style","textAlign","Timeline","console","log","TimelineItem","TimelineOppositeContent","color","className","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","toPrecision","render","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.bbfbd557.chunk.js","sourcesContent":["import React, {createContext, useContext, useState, useEffect} from 'react';\r\nimport {Backdrop} from '@material-ui/core';\r\n\r\nconst BackdropContext = createContext({content: null, setContent: null});\r\n\r\nexport const BackdropProvider = ({children}) => \r\n{\r\n    const [content, setContent] = useState();\r\n\r\n    return (\r\n        <BackdropContext.Provider value={{content: content, setContent: setContent}}>\r\n            {content ? <Backdrop open>{content}</Backdrop> : null}\r\n            {children}\r\n        </BackdropContext.Provider>\r\n    );\r\n};\r\n\r\nconst CustomBackdrop = ({children}) =>\r\n{\r\n    const {setContent} = useContext(BackdropContext);\r\n\r\n    useEffect(() => \r\n    {\r\n        setContent(children);\r\n\r\n        return () => setContent();\r\n    },\r\n    [children, setContent]);\r\n\r\n    return null;\r\n}\r\n\r\nexport const useBackdrop = () =>\r\n{\r\n    const {setContent} = useContext(BackdropContext);\r\n\r\n    return setContent;\r\n}\r\n\r\nexport {CustomBackdrop as Backdrop};","import React, {useState} from 'react';\r\nimport {Backdrop} from './backdrop';\r\nimport useGoogleSheets from 'use-google-sheets';\r\nimport {Container, Alert, Grid} from '@material-ui/core';\r\nimport {Timeline as MuiTimeline, TimelineItem, TimelineSeparator, TimelineConnector, TimelineContent, TimelineDot, TimelineOppositeContent} from '@material-ui/lab';\r\n\r\nimport useAsyncEffect from 'use-async-effect';\r\nimport {default as names} from './names.json';\r\n\r\nexport const App = () =>\r\n{\r\n    return (\r\n        <Container>\r\n            <GoogleSheet />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\nconst GoogleSheet = () =>\r\n{\r\n    const {error, loading, data} = useGoogleSheets\r\n    ({\r\n        apiKey: process.env.REACT_APP_API_KEY, \r\n        sheetId: process.env.REACT_APP_SHEET_ID, \r\n        sheetNames: ['Raw']\r\n    });\r\n\r\n    if (error)\r\n        return <Alert severity=\"error\">Failed to load data from Google Sheet.</Alert>;\r\n    \r\n    if (loading)\r\n        return <Backdrop>Loading data from Google Sheet...</Backdrop>\r\n\r\n    return <ParseData data={data} />;\r\n}\r\n\r\nconst ParseData = ({data: rawData}) =>\r\n{\r\n    const [{loading, data, error}, setData] = useState({loading: true, data: null, error: null});\r\n\r\n    useAsyncEffect(async (mounted) =>\r\n    {\r\n        const data = await parseData(rawData);\r\n\r\n        if (!mounted())\r\n            return;\r\n        \r\n        setData(data);\r\n    }, \r\n    []);\r\n\r\n    if (error)\r\n        return <Alert severity=\"error\">Failed to parse loaded data.</Alert>;\r\n\r\n    if (loading)\r\n        return <Backdrop>Parsing loaded data...</Backdrop>;\r\n\r\n    return <Timelines data={data} />;\r\n}\r\n\r\nconst parseData = (rawData) =>\r\n{\r\n    const sheet = rawData.find(({id}) => id === process.env.REACT_APP_SHEET_NAME);\r\n\r\n    if (!sheet)\r\n        return {error: true, loading: false, data: null};\r\n    \r\n    const timelines = [];\r\n\r\n    names.forEach((name) => timelines[name] = generateTimeline(sheet.data, name));\r\n    \r\n    return {error: false, loading: false, data: timelines};\r\n}\r\n\r\nconst generateTimeline = (rows, name) =>\r\n{\r\n    const timeline = [];\r\n\r\n    rows.forEach((row) =>\r\n    {\r\n        const rawText = row[name];\r\n\r\n        if (!rawText)\r\n            return;\r\n        \r\n        const textParts = rawText.split('\\n');\r\n\r\n        const data =\r\n        {\r\n            steam64Id: textParts[0].split(' - ')[1],\r\n            name: textParts[1].split('Name: ')[1],\r\n            totalPlayTime: textParts[2].split('Total playtime: ')[1].split(' / ')[0],\r\n            sessions: Number(textParts[2].split('Total playtime: ')[1].split(' / ')[1].split(': ')[1]),\r\n            lastPlayed: textParts[3].split('Last played: ')[1],\r\n            kills: Number(textParts[5].split(' ')[1]),\r\n            deaths: Number(textParts[5].split(' ')[3]),\r\n            longestKill: textParts[6].split('Longest kill: ')[1].split(' / ')[0],\r\n            averageEngagementDistance: textParts[6].split('Longest kill: ')[1].split(' / ')[1].split(': ')[1],\r\n            topWeapon: textParts[7].split('Top weapon: ')[1]\r\n        };\r\n\r\n        timeline.push(data);\r\n    });\r\n\r\n    return timeline;\r\n}\r\n\r\nconst Timelines = ({data: timelines}) => \r\n{\r\n    return (\r\n        <Grid container spacing={2}>\r\n            {Object.keys(timelines).map((name, key) => \r\n                <Grid item xs={4} key={key} >\r\n                    <p style={{textAlign: 'center'}}><strong>{name}</strong></p>\r\n                    <Timeline name={name} data={timelines[name]} />\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    );\r\n}\r\n\r\nconst Timeline = ({name, data}) =>\r\n{\r\n    console.log(data);\r\n    \r\n    return (\r\n        <MuiTimeline>\r\n            {data.map((item, key) => \r\n                <TimelineItem key={key}>\r\n                    <TimelineOppositeContent color=\"textSecondary\" className=\"small\">\r\n                        {item.lastPlayed}\r\n                    </TimelineOppositeContent>\r\n                    <TimelineSeparator>\r\n                        <TimelineDot />\r\n                        <TimelineConnector />\r\n                    </TimelineSeparator>\r\n                    <TimelineContent>\r\n                        {item.kills} / {item.deaths} / {(item.kills / item.deaths).toPrecision(3)}\r\n                    </TimelineContent>\r\n                </TimelineItem>\r\n            )}\r\n        </MuiTimeline>\r\n    );\r\n}","import React, {StrictMode} from 'react';\r\nimport {render} from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {CssBaseline} from '@material-ui/core';\r\nimport {BackdropProvider} from './backdrop';\r\nimport App from './app';\r\nimport './style.css';\r\n\r\nrender\r\n(\r\n    <StrictMode>\r\n        <BrowserRouter>\r\n            <CssBaseline />\r\n            <BackdropProvider>\r\n                <App />\r\n            </BackdropProvider>\r\n        </BrowserRouter>\r\n    </StrictMode>, \r\n    document.querySelector('#app')\r\n);"],"sourceRoot":""}